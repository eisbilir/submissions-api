{
	"info": {
		"_postman_id": "d26d42b9-fd21-46f2-b721-0b0035024a64",
		"name": "Submission API",
		"description": "Topcoder Submission API Postman Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health",
			"item": [
				{
					"name": "health check request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review Type",
			"item": [
				{
					"name": "Create Review Type",
					"item": [
						{
							"name": "create review type successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.expect(response.name).to.eq(iterationData.get('name'));\r",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'));\r",
											"        const role = iterationData.get('token').split('_')[0];\r",
											"        pm.environment.set(`REVIEW_TYPE_ID_${role}`, response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review type by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review type by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review type by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": null,\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review type by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review type by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review type by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"isActive\": {{isActive}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Review Type",
					"item": [
						{
							"name": "get review type successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.name).to.eq(iterationData.get('name'));\r",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get review type unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Review Types",
					"item": [
						{
							"name": "search review types successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.length).to.eq(iterationData.get('count'))\r",
											"    if (response.length > 0) {\r",
											"        pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('X-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('X-Per-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('X-Total'))\r",
											"        pm.expect(pm.response.headers.get('X-Total-Pages')).to.eq(iterationData.get('X-Total-Pages'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "search review types unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fully Update Review Type",
					"item": [
						{
							"name": "fully update review type successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.name).to.eq(iterationData.get('name'));\r",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review type by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review type by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review type by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": null,\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review type by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review type by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review type by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"isActive\": {{isActive}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partially Update Review Type",
					"item": [
						{
							"name": "partially update review type successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.name).to.eq(iterationData.get('name'));\r",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review type by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review type by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review type by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": null,\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review type by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"isActive\": {{isActive}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Review Type",
					"item": [
						{
							"name": "delete review type by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete review type by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete review type successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewTypes/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewTypes",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Submission",
			"item": [
				{
					"name": "Create Submission",
					"item": [
						{
							"name": "create submission successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;",
											"const httpCode = iterationData.get('httpCode');",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"OK\"){",
											"        const response = pm.response.json();",
											"        pm.expect(response.type).to.eq(iterationData.get('type'));",
											"        pm.expect(response.url).to.eq(iterationData.get('url'));",
											"        pm.expect(response.memberId).to.eq(iterationData.get('memberId'));",
											"        pm.expect(response.challengeId).to.eq(iterationData.get('legacyChallengeId'));",
											"        pm.expect(response.legacyChallengeId).to.eq(iterationData.get('legacyChallengeId'));",
											"        pm.expect(response.submissionPhaseId).to.eq(iterationData.get('submissionPhaseId'));",
											"        pm.expect(response.fileType).to.eq(iterationData.get('fileType'));",
											"        pm.expect(response.v5ChallengeId).to.eq(iterationData.get('v5ChallengeId'));",
											"        const role = iterationData.get('token').split('_')[0];",
											"        pm.environment.set(`SUBMISSION_ID_${role}`, response.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"{{type}}\",\r\n    \"memberId\": \"{{memberId}}\",\r\n    \"challengeId\": \"{{challengeId}}\",\r\n    \"url\": \"{{url}}\",\r\n    \"fileType\": \"{{fileType}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;",
											"const httpCode = iterationData.get('httpCode');",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"OK\"){",
											"        const response = pm.response.json();",
											"        pm.expect(response.type).to.eq(iterationData.get('type'));",
											"        pm.expect(response.memberId).to.eq(iterationData.get('memberId'));",
											"        pm.expect(response.challengeId).to.eq(iterationData.get('legacyChallengeId'));",
											"        pm.expect(response.legacyChallengeId).to.eq(iterationData.get('legacyChallengeId'));",
											"        pm.expect(response.submissionPhaseId).to.eq(iterationData.get('submissionPhaseId'));",
											"        pm.expect(response.fileType).to.eq(iterationData.get('fileType'));",
											"        pm.expect(response.v5ChallengeId).to.eq(iterationData.get('v5ChallengeId'));",
											"        const role = iterationData.get('token').split('_')[0];",
											"        pm.environment.set(`SUBMISSION_ID_DOWNLOAD_${role}`, response.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "submission",
											"type": "file",
											"src": "test/postman/testData/dummy.zip"
										},
										{
											"key": "type",
											"value": "{{type}}",
											"type": "text"
										},
										{
											"key": "memberId",
											"value": "{{memberId}}",
											"type": "text"
										},
										{
											"key": "challengeId",
											"value": "{{challengeId}}",
											"type": "text"
										},
										{
											"key": "fileType",
											"value": "{{fileType}}",
											"type": "text"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\",\n    \"submittedDate\": \"{{submittedDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": null,\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "create submission by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Submission",
					"item": [
						{
							"name": "get submission successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get submission unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get submission download successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "get submission download unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{id}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{id}}",
										"download"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Submissions",
					"item": [
						{
							"name": "search submissions successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.length).to.eq(iterationData.get('count'))\r",
											"    if (response.length > 0) {\r",
											"        pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('X-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('X-Per-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('X-Total'))\r",
											"        pm.expect(pm.response.headers.get('X-Total-Pages')).to.eq(iterationData.get('X-Total-Pages'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "search submissions unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fully Update Submission",
					"item": [
						{
							"name": "fully update submission successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.type).to.eq(iterationData.get('type'));\r",
											"    pm.expect(response.url).to.eq(iterationData.get('url'));\r",
											"    pm.expect(response.memberId).to.eq(iterationData.get('memberId'));\r",
											"    pm.expect(response.challengeId).to.eq(iterationData.get('legacyChallengeId'));\r",
											"    pm.expect(response.legacyChallengeId).to.eq(iterationData.get('legacyChallengeId'));\r",
											"    pm.expect(response.submissionPhaseId).to.eq(iterationData.get('submissionPhaseId'));\r",
											"    pm.expect(response.fileType).to.eq(iterationData.get('fileType'));\r",
											"    pm.expect(response.v5ChallengeId).to.eq(iterationData.get('v5ChallengeId'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"type\": null,\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"memberId\": \"{{memberId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update submission by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\",\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partially Update Submission",
					"item": [
						{
							"name": "partially update submission successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.type).to.eq(iterationData.get('type'));\r",
											"    pm.expect(response.url).to.eq(iterationData.get('url'));\r",
											"    pm.expect(response.memberId).to.eq(iterationData.get('memberId'));\r",
											"    pm.expect(response.challengeId).to.eq(iterationData.get('legacyChallengeId'));\r",
											"    pm.expect(response.legacyChallengeId).to.eq(iterationData.get('legacyChallengeId'));\r",
											"    pm.expect(response.submissionPhaseId).to.eq(iterationData.get('submissionPhaseId'));\r",
											"    pm.expect(response.fileType).to.eq(iterationData.get('fileType'));\r",
											"    pm.expect(response.v5ChallengeId).to.eq(iterationData.get('v5ChallengeId'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update submission by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update submission by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"{{type}}\",\n    \"memberId\": \"{{memberId}}\",\n    \"challengeId\": \"{{challengeId}}\",\n    \"url\": \"{{url}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update submission by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"type\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update submission by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fileType\": \"{{fileType}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Submission",
					"item": [
						{
							"name": "delete submission by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete submission by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete submission successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Artifact",
			"item": [
				{
					"name": "Create Artifact",
					"item": [
						{
							"name": "create artifact successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;",
											"const httpCode = iterationData.get('httpCode');",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"OK\"){",
											"        const response = pm.response.json();",
											"        pm.expect(response.artifact).to.eq(iterationData.get('artifact'));",
											"        const role = iterationData.get('token').split('_')[0];",
											"        pm.environment.set(`ARTIFACT_NAME_${role}`, response.artifact.substring(0,response.artifact.lastIndexOf('.')));",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "artifact",
											"type": "file",
											"src": "test/postman/testData/dummy.zip"
										}
									],
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create artifact by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "artifact",
											"type": "file",
											"src": "test/postman/testData/dummy.zip"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create artifact by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "artifact",
											"type": "file",
											"src": "test/postman/testData/dummy.zip"
										},
										{
											"key": "typeId",
											"value": "{{{{typeId}}}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create artifact by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Artifact",
					"item": [
						{
							"name": "get artifact download successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts/{{{{name}}}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts",
										"{{{{name}}}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "get artifact download unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message').replace('#ID#',pm.environment.get(iterationData.get('id'))))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts/{{{{name}}}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts",
										"{{{{name}}}}",
										"download"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Artifact",
					"item": [
						{
							"name": "search artifacts successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.artifacts.length).to.eq(iterationData.get('count'))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "search artifacts unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Artifact",
					"item": [
						{
							"name": "delete artifact by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts/{{{{name}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts",
										"{{{{name}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete artifact by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message').replace('#ID#',pm.environment.get(iterationData.get('id'))))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts/{{{{name}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts",
										"{{{{name}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete artifact successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/submissions/{{{{id}}}}/artifacts/{{{{name}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"submissions",
										"{{{{id}}}}",
										"artifacts",
										"{{{{name}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Create Review",
					"item": [
						{
							"name": "create review successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.expect(response.score).to.eq(iterationData.get('score'));\r",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(iterationData.get('typeId')));\r",
											"        pm.expect(response.reviewerId).to.eq(iterationData.get('reviewerId'));\r",
											"        pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"        pm.expect(response.submissionId).to.eq(pm.environment.get(iterationData.get('submissionId')));\r",
											"        pm.expect(response.status).to.eq(iterationData.get('status'));\r",
											"        const role = iterationData.get('token').split('_')[0];\r",
											"        pm.environment.set(`REVIEW_ID_${role}`, response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by missing field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\",\n    \"reviewedDate\": \"{{reviewedDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Review",
					"item": [
						{
							"name": "get review successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.score).to.eq(iterationData.get('score'));\r",
											"    pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get review unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Review",
					"item": [
						{
							"name": "search reviews successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.length).to.eq(iterationData.get('count'))\r",
											"    if (response.length > 0) {\r",
											"        pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('X-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('X-Per-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('X-Total'))\r",
											"        pm.expect(pm.response.headers.get('X-Total-Pages')).to.eq(iterationData.get('X-Total-Pages'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "search reviews unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fully Update Review",
					"item": [
						{
							"name": "fully update review successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.score).to.eq(iterationData.get('score'));\r",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(iterationData.get('typeId')));\r",
											"    pm.expect(response.reviewerId).to.eq(iterationData.get('reviewerId'));\r",
											"    pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"    pm.expect(response.submissionId).to.eq(pm.environment.get(iterationData.get('submissionId')));\r",
											"    pm.expect(response.status).to.eq(iterationData.get('status'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"score\": \"{{score}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by missing field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partially Update Review",
					"item": [
						{
							"name": "partially update review successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.score).to.eq(iterationData.get('score'));\r",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(iterationData.get('typeId')));\r",
											"    pm.expect(response.reviewerId).to.eq(iterationData.get('reviewerId'));\r",
											"    pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"    pm.expect(response.submissionId).to.eq(pm.environment.get(iterationData.get('submissionId')));\r",
											"    pm.expect(response.status).to.eq(iterationData.get('status'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"score\": \"{{score}}\",\n    \"typeId\": \"{{{{typeId}}}}\",\n    \"reviewerId\": \"{{reviewerId}}\",\n    \"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Review",
					"item": [
						{
							"name": "delete review by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete review by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete review successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviews/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviews",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Review Summation",
			"item": [
				{
					"name": "Create Review Summation",
					"item": [
						{
							"name": "create review summation successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json();\r",
											"        pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"        pm.expect(response.submissionId).to.eq(pm.environment.get(iterationData.get('submissionId')));\r",
											"        pm.expect(response.aggregateScore).to.eq(iterationData.get('aggregateScore'));\r",
											"        pm.expect(response.isPassing).to.eq(iterationData.get('isPassing'));\r",
											"        pm.expect(response.isFinal).to.eq(iterationData.get('isFinal'));\r",
											"        const role = iterationData.get('token').split('_')[0];\r",
											"        pm.environment.set(`REVIEW_SUMMATION_ID_${role}`, response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "create review summation by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}},\n    \"reviewedDate\": \"{{reviewedDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Review Summation",
					"item": [
						{
							"name": "get review summation successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.score).to.eq(iterationData.get('score'));\r",
											"    pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get review summation unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search Review Summation",
					"item": [
						{
							"name": "search review summations successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.length).to.eq(iterationData.get('count'))\r",
											"    if (response.length > 0) {\r",
											"        pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('X-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('X-Per-Page'))\r",
											"        pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('X-Total'))\r",
											"        pm.expect(pm.response.headers.get('X-Total-Pages')).to.eq(iterationData.get('X-Total-Pages'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						},
						{
							"name": "search review summations unsuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('params')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fully Update Review Summation",
					"item": [
						{
							"name": "fully update review summation successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"    pm.expect(response.submissionId).to.eq(pm.environment.get(iterationData.get('submissionId')));\r",
											"    pm.expect(response.aggregateScore).to.eq(iterationData.get('aggregateScore'));\r",
											"    pm.expect(response.isPassing).to.eq(iterationData.get('isPassing'));\r",
											"    pm.expect(response.isFinal).to.eq(iterationData.get('isFinal'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update review summation by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Partially Update Review Summation",
					"item": [
						{
							"name": "partially update review summation successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.scoreCardId).to.eq(iterationData.get('scoreCardId'));\r",
											"    pm.expect(response.submissionId).to.eq(pm.environment.get(iterationData.get('submissionId')));\r",
											"    pm.expect(response.aggregateScore).to.eq(iterationData.get('aggregateScore'));\r",
											"    pm.expect(response.isPassing).to.eq(iterationData.get('isPassing'));\r",
											"    pm.expect(response.isFinal).to.eq(iterationData.get('isFinal'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review summation by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review summation by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scoreCardId\": {{scoreCardId}},\n    \"submissionId\": \"{{{{submissionId}}}}\",\n    \"aggregateScore\": {{aggregateScore}},\n    \"isPassing\": {{isPassing}},\n    \"isFinal\": {{isFinal}}\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update review summation by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Review Summation",
					"item": [
						{
							"name": "delete review summation by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete review summation by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData\r",
											"const httpCode = iterationData.get('httpCode')\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"    const response = pm.response.json()\r",
											"    if(response.result) {\r",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))\r",
											"    } else {\r",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete review summation successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpCode = iterationData.get('httpCode');\r",
											"pm.test(`Status code is ${httpCode}`, function () {\r",
											"    pm.response.to.have.status(httpCode);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{{{token}}}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/reviewSummations/{{{{id}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"reviewSummations",
										"{{{{id}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}